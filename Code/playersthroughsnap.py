# -*- coding: utf-8 -*-
"""playersthroughsnap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z-Npn-iQ3H-fpxPyGxVF4uqmjIoKa_6V
"""

import pandas as pd
import numpy as np

games = pd.read_csv('games.csv')
print(games)

player_play = pd.read_csv('player_play.csv')
print(player_play)

players = pd.read_csv('players.csv')
print(players)

plays = pd.read_csv('plays.csv')
print(plays)

week1 = pd.read_csv('tracking_week_1.csv')
print(week1)

week2 = pd.read_csv('tracking_week_2.csv')
print(week2)

week3 = pd.read_csv('tracking_week_3.csv')

week4 = pd.read_csv('tracking_week_4.csv')

week5 = pd.read_csv('tracking_week_5.csv')

week6 = pd.read_csv('tracking_week_6.csv')

week7 = pd.read_csv('tracking_week_7.csv')

week8 = pd.read_csv('tracking_week_8.csv')

week9 = pd.read_csv('tracking_week_8.csv')

tracking_data = pd.concat([week1, week2, week3, week4, week5, week6, week7, week8, week9], ignore_index=True)
def analyze_player_movement_by_position(game_id, play_id, tracking_data, plays, players, num_frames=20):
    """
    Differentiates offensive and defensive players moving around the snap event using player positions.

    Args:
        game_id (int): The game identifier.
        play_id (int): The play identifier.
        tracking_data (pd.DataFrame): The tracking data DataFrame.
        plays (pd.DataFrame): The plays data containing possession info.
        players (pd.DataFrame): The players data containing position info.
        num_frames (int): Number of frames before and after the snap to analyze.

    Returns:
        tuple: Number of offensive and defensive players moving in the 'before' and 'after' windows.
               Returns None if the play or SNAP event is not found.
    """
    # Filter for the specific game and play
    play_data = tracking_data[(tracking_data['gameId'] == game_id) & (tracking_data['playId'] == play_id)]

    if play_data.empty:
        print(f"No data found for gameId: {game_id}, playId: {play_id}")
        return None

    # Get the possession team from the plays DataFrame
    possession_team = plays[(plays['gameId'] == game_id) & (plays['playId'] == play_id)]['possessionTeam'].values
    if len(possession_team) == 0:
        print(f"No possession team data found for gameId: {game_id}, playId: {play_id}")
        return None
    possession_team = possession_team[0]

    # Find the SNAP frame
    snap_frame = play_data[play_data['frameType'] == 'SNAP']['frameId'].min()
    if pd.isna(snap_frame):
        print(f"'SNAP' event not found for gameId: {game_id}, playId: {play_id}")
        return None

    # Frame ranges
    before_start_frame = snap_frame - num_frames
    before_end_frame = snap_frame - 1
    after_start_frame = snap_frame + 1
    after_end_frame = snap_frame + num_frames

    # Merge tracking_data with players to add position information
    play_data = play_data.merge(players[['nflId', 'position']], on='nflId', how='left')

    if play_data['position'].isnull().any():
        print("Warning: Some players are missing position information.")

    # Determine offensive and defensive positions
    offensive_positions = ['QB', 'RB', 'FB', 'WR', 'TE', 'OL']  # Example offensive positions
    defensive_positions = ['DL', 'LB', 'CB', 'S']                # Example defensive positions

    # Function to count moving players by position type
    def count_moving_players_by_position(start_frame, end_frame):
        relevant_data = play_data[(play_data['frameId'] >= start_frame) & (play_data['frameId'] <= end_frame)]
        if relevant_data.empty:
            return 0, 0

        # Identify offense and defense based on positions
        offense = relevant_data[relevant_data['position'].isin(offensive_positions)]
        defense = relevant_data[relevant_data['position'].isin(defensive_positions)]

        # Count moving players
        offensive_moving = offense.groupby('nflId')['s'].max() > 0
        defensive_moving = defense.groupby('nflId')['s'].max() > 0

        return offensive_moving.sum(), defensive_moving.sum()

    # Count moving players in before and after snap windows
    moving_before_snap_off, moving_before_snap_def = count_moving_players_by_position(before_start_frame, before_end_frame)
    moving_after_snap_off, moving_after_snap_def = count_moving_players_by_position(after_start_frame, after_end_frame)

    return (moving_before_snap_off, moving_before_snap_def, moving_after_snap_off, moving_after_snap_def)

# Example usage
for play_id in range(54, 5121):
    game_id = plays[plays['playId'] == play_id]['gameId'].values
    if len(game_id) > 0:
        game_id = game_id[0]
    else:
        game_id = np.nan

    if pd.isna(game_id):
        print(f"Game ID not found for playId: {play_id}")
        continue

    result = analyze_player_movement_by_position(game_id, play_id, tracking_data, plays, players)
    if result:
        (before_off, before_def, after_off, after_def) = result
        print(f"Game ID: {game_id}, Play ID: {play_id}:")
        print(f"  Moving offensive players before snap: {before_off}, after snap: {after_off}")
        print(f"  Moving defensive players before snap: {before_def}, after snap: {after_def}")
    print("-" * 30)